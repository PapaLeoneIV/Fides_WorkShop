# Description: Docker compose file for the microservices architecture
# Backend services: bike-rental-service, hotel-booking-service, payment-confirmation-service, order-management-service
# Databases: db_bike_rental, db_hotel_booking, db_payment_confirmation, db_order_management
# Message broker: rabbitmq
# Logging and monitoring: grafana, loki, promtail

volumes:
  db_bike_rental:
  db_hotel_booking:
  db_payment_confirmation:
  db_order_management:
  db_auth:

networks:
  app_network:
    driver: bridge

services:
#--------------------------------- -  -
#---------------------------BACKEND SERVICES
#------------------------- -  - --  -  --
  #--------------------------BIKE RENTAL
  bike-rental-service:
    container_name: bike-rental-service
    build: ./src/backend/bike-rental
    depends_on:
      db_bike_rental:
        condition: service_healthy # ensures that the database is completely running
    #TODO_PROD: remove in production we'll rely on the npm build in the Dockerfile
    command: >
      sh -c "npm install \
      && npx prisma generate --schema ./prisma/schema.prisma \
      && npx tsx src/index.ts"
    #TODO_PROD: remove in production
    volumes:
      - ./src/backend/bike-rental:/app
      - ./src/backend/bike-rental/package.json:/app/package.json
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      POSTGRES_DB: ${POSTGRES_DB_BIKE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_bike_rental:${POSTGRES_PORT}/${POSTGRES_DB_BIKE}?schema=public
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT}
    networks:
      - app_network
    #TODO_PROD: update to serve only in the internal network
    ports:
      - "3000:3000"
      - "5555:5555" #prisma studio
    # expose:
    #   - "3000"
    restart: always
  #--------------------------HOTEL BOOKING
  hotel-booking-service:
    container_name: hotel-booking-service
    build: ./src/backend/hotel-booking
    depends_on:
      db_hotel_booking:
        condition: service_healthy # ensures that the database is completely running
    command: >
      sh -c "npm install \
      && npx prisma generate --schema ./prisma/schema.prisma \
      && npx tsx src/index.ts"
    volumes:
      - ./src/backend/hotel-booking:/app
      - ./src/backend/hotel-booking/package.json:/app/package.json
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      POSTGRES_DB: ${POSTGRES_DB_HOTEL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_hotel_booking:${POSTGRES_PORT}/${POSTGRES_DB_HOTEL}?schema=public
    networks:
      - app_network
    ports: 
      - "3001:3000"
      - "5556:5556" #prisma studio
    restart: always

  #--------------------------PAYMENT CONFIRMATION
  payment-confirmation-service:
    container_name: payment-confirmation-service
    build: ./src/backend/payment-confirmation
    depends_on:
      db_payment_confirmation:
        condition: service_healthy # ensures that the database is completely running
    command: >
      sh -c "npm install \
      && npx tsx src/index.ts"
    volumes:
      - ./src/backend/payment-confirmation:/app
      - ./src/backend/payment-confirmation/package.json:/app/package.json
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      POSTGRES_DB: ${POSTGRES_DB_PAYMENT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_payment_confirmation:${POSTGRES_PORT}/${POSTGRES_DB_PAYMENT}?schema=public
    networks:
      - app_network
    ports:
      - "3002:3000"
      - "5557:5557" #prisma studio
    restart: always
  #--------------------------ORDER MANAGEMENT
  order-management-service:
    container_name: order-management-service
    build: ./src/backend/order-management
    depends_on:
      db_order_management: # ensures that the database is completely running
        condition: service_healthy
    command: >
      sh -c "npm install \
      && npx prisma generate --schema ./prisma/schema.prisma \
      && npx tsx src/index.ts"
    volumes:
      - ./src/backend/order-management:/app
      - ./src/backend/order-management/package.json:/app/package.json
    environment:
      NODE_ENV: ${NODE_ENV}
      POSTGRES_DB: ${POSTGRES_DB_ORDER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_order_management:${POSTGRES_PORT}/${POSTGRES_DB_ORDER}?schema=public
    networks:
      - app_network
    ports:
      - "3003:3000"
      - "5558:5558" #prisma studio
    restart: always
  #--------------------------AUTHENTICATION
  authentication-service:
    container_name: authentication-service
    build: ./src/backend/auth
    depends_on:
      db_auth:
        condition: service_healthy
    command: >
      sh -c "npm install \
      && npx prisma generate --schema ./prisma/schema.prisma \
      && npx tsx src/index.ts"
    volumes:
      - ./src/backend/auth:/app
      - ./src/backend/auth/package.json:/app/package.json
    environment:
      NODE_ENV: ${NODE_ENV}
      POSTGRES_DB: ${POSTGRES_DB_AUTH}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_auth:${POSTGRES_PORT}/${POSTGRES_DB_AUTH}?schema=public
      BYCRYPT_SALT: ${BYCRYPT_HASH_SEED}
      TOKEN_SECRET: ${TOKEN_SECRET}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "3004:3000"
      - "5559:5559" #prisma studio
    restart: always
  config_service:
    container_name: config-service
    build: ./src/backend/config_service/
    command: >
      sh -c "npm install \
      && npx tsx src/index.ts"
    volumes:
      - ./src/backend/config_service:/app
      - ./src/backend/config_service/package.json:/app/package.json
    networks:
      - app_network
    ports:
      - "3005:3000"
    restart: always
  frontend:
    container_name: frontend
    build: ./src/frontend
    command: >
      sh -c "npm install \
      ; npx prisma generate \
      ; npm run dev -- -p 6969"
    volumes:
      - ./src/frontend:/app
      - ./src/frontend/package.json:/app/package.json
    environment:
      NODE_ENV: $NODE_ENV
      POSTGRES_DB: $POSTGRES_DB_AUTH
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_PORT: $POSTGRES_PORT
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_frontend:${POSTGRES_PORT}/${POSTGRES_DB_FRONTEND}?schema=public
      GOOGLE_CLIENT_ID: $GOOGLE_CLIENT_ID
      GOOGLE_CLIENT_SECRET: $GOOGLE_CLIENT_SECRET
      GITHUB_CLIENT_ID: $GITHUB_CLIENT_ID
      GITHUB_CLIENT_SECRET: $GITHUB_CLIENT_SECRET
      NEXTAUTH_URL: $NEXTAUTH_URL
    networks:
      - app_network
    ports:
      - "6969:6969"
    
  
#--------------------------------- -  -
#----------------------------DATABASES
#------------------------- -  - --  -  --
  #--------------------------bike rental
  db_bike_rental:
    image: postgres:13
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB_BIKE} -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
     #TODO_PROD: update to let docker manage the volume
      - db_bike_rental:/var/lib/postgresql/data
      - ./src/backend/bike-rental/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_BIKE}
    networks:
      - app_network
    #TODO_PROD: update to serve only in the internal network
    ports:
      - "5433:5432"
    # expose:
    #   - "5432"
    restart: always
  #--------------------------hotel booking
  db_hotel_booking:
    image: postgres:13
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB_HOTEL} -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
      - db_hotel_booking:/var/lib/postgresql/data
      - ./src/backend/hotel-booking/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_HOTEL}
    networks:
      - app_network
    ports:
      - "5434:5432"
    restart: always
  #--------------------------payment confirmation
  db_payment_confirmation:
    image: postgres:13
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB_PAYMENT} -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
      - db_payment_confirmation:/var/lib/postgresql/data
       - ./src/backend/payment-confirmation/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_PAYMENT}
    networks:
      - app_network
    ports:
      - "5435:5432"
    restart: always
  #--------------------------order management
  db_order_management:
    image: postgres:13
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB_ORDER} -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
      - db_order_management:/var/lib/postgresql/data
      - ./src/backend/order-management/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_ORDER}
    networks:
      - app_network
    ports:
      - "5436:5432"
    restart: always
  #--------------------------authentication
  db_auth:
    image: postgres:13
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB_AUTH} -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 10
    volumes:
      - db_auth:/var/lib/postgresql/data
      - ./src/backend/auth/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_AUTH}
    networks:
      - app_network
    ports:
      - "5437:5432"
    restart: always
#--------------------------------- -  -
#--------------------------MESSAGE BROKER
#------------------------- -  - --  -  --
  #--------------------------RabbitMQ
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - app_network
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
  #LOGGING AND MONITORING

  #grafana:
  #  image: grafana/grafana:latest
  #  ports:
  #    - 3000:3000
  #  volumes:
  #    - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
  #  environment:
  #    - GF_AUTH_ANONYMOUS_ENABLED=true
  #    - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #    - GF_AUTH_DISABLE_LOGIN_FORM=true
  #  networks:
  #    - app_network
#
  #loki:
  #  image: grafana/loki:latest
  #  ports:
  #    - 3100:3100
  #  command: -config.file=/etc/loki/local-config.yaml
  #  networks:
  #    - app_network
#
  #promtail:
  #  image:  grafana/promtail:latest
  #  container_name: promtail
  #  volumes:
  #    - ./config/promtail.yaml:/etc/promtail/docker-config.yaml
  #    - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  command: -config.file=/etc/promtail/docker-config.yaml
  #  depends_on:
  #    - loki
  #  networks:
  #    - app_network

